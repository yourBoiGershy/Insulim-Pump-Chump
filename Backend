// def.h
#ifndef DEF_H
#define DEF_H

#define BG_CRITICAL_LOW 3.9
#define BG_CRITICAL_HIGH 13.9
#define BATTERY_LOW_THRESHOLD 20
#define INSULIN_LOW_THRESHOLD 10

#endif


// backendcontroller.h
#ifndef BACKENDCONTROLLER_H
#define BACKENDCONTROLLER_H

#include "datastorage.h"
#include "insulinmanager.h"
#include "errordetector.h"

class BackendController {
public:
    BackendController();
    ~BackendController();

    DataStorage* dataStorage;
    InsulinManager* insulinManager;
    ErrorDetector* errorDetector;

    void initialize();
};

#endif


// backendcontroller.cpp
#include "backendcontroller.h"

BackendController::BackendController() {
    dataStorage = new DataStorage();
    insulinManager = new InsulinManager(dataStorage);
    errorDetector = new ErrorDetector(dataStorage);
}

BackendController::~BackendController() {
    delete insulinManager;
    delete errorDetector;
    delete dataStorage;
}

void BackendController::initialize() {
    dataStorage->initializeDB();
}


// datastorage.h
#ifndef DATASTORAGE_H
#define DATASTORAGE_H

#include <QtSql>
#include <QString>
#include <QVariantList>

class DataStorage {
public:
    DataStorage();
    ~DataStorage();

    void initializeDB();
    void saveProfile(QString name, double basal, double correctionFactor, double carbRatio, double targetBG);
    void logEvent(QString type, QString details);

private:
    QSqlDatabase db;
    void createTables();
};

#endif


// datastorage.cpp
#include "datastorage.h"

DataStorage::DataStorage() {
    db = QSqlDatabase::addDatabase("QSQLITE");
    db.setDatabaseName("insulinPump.db");
}

DataStorage::~DataStorage() {
    db.close();
}

void DataStorage::initializeDB() {
    if(db.open()) {
        createTables();
    }
}

void DataStorage::createTables() {
    QSqlQuery query;
    query.exec("CREATE TABLE IF NOT EXISTS Profiles(id INTEGER PRIMARY KEY, name TEXT, basal REAL, correctionFactor REAL, carbRatio REAL, targetBG REAL)");
    query.exec("CREATE TABLE IF NOT EXISTS Logs(id INTEGER PRIMARY KEY, type TEXT, details TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)");
}

void DataStorage::saveProfile(QString name, double basal, double correctionFactor, double carbRatio, double targetBG) {
    QSqlQuery query;
    query.prepare("INSERT INTO Profiles(name, basal, correctionFactor, carbRatio, targetBG) VALUES (?, ?, ?, ?, ?)");
    query.addBindValue(name);
    query.addBindValue(basal);
    query.addBindValue(correctionFactor);
    query.addBindValue(carbRatio);
    query.addBindValue(targetBG);
    query.exec();
}

void DataStorage::logEvent(QString type, QString details) {
    QSqlQuery query;
    query.prepare("INSERT INTO Logs(type, details) VALUES (?, ?)");
    query.addBindValue(type);
    query.addBindValue(details);
    query.exec();
}


// insulinmanager.h
#ifndef INSULINMANAGER_H
#define INSULINMANAGER_H

#include "datastorage.h"

class InsulinManager {
public:
    InsulinManager(DataStorage* storage);
    void checkGlucose(double glucose);

private:
    DataStorage* storage;
    bool isInsulinActive;

    void stopInsulin();
};

#endif


// insulinmanager.cpp
#include "insulinmanager.h"
#include "def.h"

InsulinManager::InsulinManager(DataStorage* storage) : storage(storage), isInsulinActive(true) {}

void InsulinManager::checkGlucose(double glucose) {
    if(glucose < BG_CRITICAL_LOW && isInsulinActive) {
        stopInsulin();
    }
}

void InsulinManager::stopInsulin() {
    isInsulinActive = false;
    storage->logEvent("DosageStopped", "Insulin delivery stopped due to low glucose level");
}


// errordetector.h
#ifndef ERRORDETECTOR_H
#define ERRORDETECTOR_H

#include "datastorage.h"

class ErrorDetector {
public:
    ErrorDetector(DataStorage* storage);
    void checkBattery(int battery);
    void checkInsulin(int insulinLevel);
    void checkCGMConnection(bool connected);
    void checkGlucose(double glucose);

private:
    DataStorage* storage;
};

#endif


// errordetector.cpp
#include "errordetector.h"
#include "def.h"

ErrorDetector::ErrorDetector(DataStorage* storage) : storage(storage) {}

void ErrorDetector::checkBattery(int battery) {
    if(battery <= BATTERY_LOW_THRESHOLD) {
        storage->logEvent("BatteryLow", "Battery critically low");
    }
}

void ErrorDetector::checkInsulin(int insulinLevel) {
    if(insulinLevel <= INSULIN_LOW_THRESHOLD) {
        storage->logEvent("InsulinLow", "Insulin level critically low");
    }
}

void ErrorDetector::checkCGMConnection(bool connected) {
    if(!connected) {
        storage->logEvent("CGMDisconnected", "CGM sensor disconnected");
    }
}

void ErrorDetector::checkGlucose(double glucose) {
    if(glucose <= BG_CRITICAL_LOW) {
        storage->logEvent("GlucoseLow", "Glucose critically low");
    } else if(glucose >= BG_CRITICAL_HIGH) {
        storage->logEvent("GlucoseHigh", "Glucose critically high");
    }
}
